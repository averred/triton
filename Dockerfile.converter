FROM nvcr.io/nvidia/tensorrt:21.12-py3

ARG DEBIAN_FRONTEND=noninteractive

SHELL ["/bin/bash", "-c"]

RUN mkdir -p /workspace

# Install requried libraries
RUN apt-get update && apt-get install -y software-properties-common
RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN apt-get update && apt-get install -y --no-install-recommends \
    libcurl4-openssl-dev \
    wget \
    zlib1g-dev \
    git \
    pkg-config \
    sudo \
    ssh \
    libssl-dev \
    pbzip2 \
    pv \
    bzip2 \
    unzip \
    devscripts \
    lintian \
    fakeroot \
    dh-make \
    build-essential

# Install python3
RUN apt-get install -y --no-install-recommends \
      python3 \
      python3-pip \
      python3-dev \
      python3-wheel &&\
    cd /usr/local/bin &&\
    ln -sf /usr/bin/python3 python &&\
    ln -sf /usr/bin/pip3 pip;

# Install PyPI packages
RUN pip3 install --upgrade pip
RUN pip3 install setuptools>=41.0.0

COPY tensorrt_conversion_manager/requirements.txt /tmp/requirements.txt
RUN pip3 install -r /tmp/requirements.txt

# For opencv
RUN apt-get update
RUN apt-get install ffmpeg libsm6 libxext6  -y

WORKDIR /workspace

RUN apt -y install build-essential cmake git pkg-config libgtk-3-dev \
    libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
    libxvidcore-dev libx264-dev libjpeg-dev libpng-dev libtiff-dev \
    gfortran openexr libatlas-base-dev python3-dev python3-numpy \
    libtbb2 libtbb-dev libdc1394-22-dev nano

RUN mkdir ./opencv_build && \
    cd ./opencv_build && \
    git clone https://github.com/opencv/opencv.git && \
    git clone https://github.com/opencv/opencv_contrib.git

RUN cd ./opencv_build/opencv && mkdir build && cd build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D INSTALL_C_EXAMPLES=ON \
        -D INSTALL_PYTHON_EXAMPLES=ON \
        -D OPENCV_GENERATE_PKGCONFIG=ON \
        -D OPENCV_EXTRA_MODULES_PATH= /workspace/opencv_build/opencv_contrib/modules \
        -D BUILD_EXAMPLES=ON .. &&\
    make -j8 && \
    make install

COPY tensorrt_conversion_manager/deployment/docker/entrypoint.sh ./entrypoint.sh
RUN chmod +x ./entrypoint.sh

COPY tensorrt_conversion_manager/models_to_convert models_to_convert
RUN chmod +x models_to_convert/*.sh

COPY tensorrt_conversion_manager/yolov5.cpp /workspace/yolov5.cpp
COPY ./tensorrt_conversion_manager /workspace/tensorrt_conversion_manager

ENTRYPOINT ["/bin/bash", "./entrypoint.sh"]
